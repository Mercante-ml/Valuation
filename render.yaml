# render.yaml (v5 - Changed type to 'database')
services:
  # 1. Banco de Dados PostgreSQL Gerenciado pelo Render
  - type: database         # CORRIGIDO de postgres
    name: valuation-db
    plan: free
    region: oregon
    # databaseName: valuation_db # Propriedades podem variar com 'database' type
    # user: valuation_user       # Propriedades podem variar com 'database' type
    # Nota: Render pode inferir o tipo exato (Postgres) pelo plano ou nome,
    #       e 'databaseName'/'user' podem não ser necessários ou válidos aqui.
    #       Vamos tentar sem eles primeiro, o Render criará um DB padrão.
    ipAllowList: []

  # 2. Cache Redis Gerenciado pelo Render
  - type: redis
    name: valuation-redis
    plan: free
    region: oregon
    ipAllowList: []

  # 3. Aplicação Web Django (Gunicorn via Docker)
  - type: web
    name: valuation-web
    plan: free
    runtime: docker
    dockerfilePath: ./Dockerfile
    dockerContext: .
    healthCheckPath: /
    envVars:
      - key: DATABASE_URL
        fromService:
          type: database   # CORRIGIDO de postgres
          name: valuation-db
          property: connectionString # Render sabe que é um DB e fornecerá a string
      - key: REDIS_URL
        fromService:
          type: redis
          name: valuation-redis
          property: connectionString
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: valuation-redis
          property: connectionString
      # --- Restante das envVars do Web ---
      - key: DJANGO_SETTINGS_MODULE
        value: valuation.settings # Verifique se 'valuation' é o nome da pasta do projeto
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: PYTHONDONTWRITEBYTECODE
        value: "1"
      - key: SECRET_KEY
        sync: false
      - key: GEMINI_API_KEY
        sync: false
      - key: GAMMA_API_KEY
        sync: false
      - key: DEBUG
        value: "False"
      - key: DJANGO_ALLOWED_HOSTS
        sync: false